[
  {
    "id": "01",
    "name": "Html",
    "img": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQcYuZypw0R-VvOCkaT2-vqbYpdPaMP6oanug&usqp=CAU",
    "details": "HTML is used to create web pages. This article will teach you the basics of HTML. I also created a 45-minute video course on the freeCodeCamp.org YouTube channel that teaches you HTML in the context of creating an actual web page. If you are just learning HTML, I recommend both reading this article and watching the video course. HTML stands for Hyper Text Markup Language. Every website on the internet uses HTML & CSS. Most also use JavaScript. In a website, HTML is the structure, CSS is the style, and JavaScript is the functionality. Here is a great interactive diagram from codeanalagies.com. Move the slider back and forth.You can actually see the HTML that makes up any element on a webpage by right-clicking an element and then selecting 'Inspect'. HTML tags mark the beginning and end of an element (and are considered part of the element). Tags are containers. They tell you something about the content between the opening & closing tags. In the element above, the tags are (opening tag) and (closing tag). You will notice that the closing tag has a /. This particular tag is a paragraph tag. It specifies a paragraph in the HTML document. The words between the opening and closing tags are a paragraph. Elements can be either container elements (they hold content) or stand-alone elements, sometimes called self-closing elements. Paragraph elements are containers: Hi, I contain content Image elements are stand-alone: Notice in the stand-alone img element, there is no closing tag but there is a / before the final angle bracket. Some things to note about attributes: Attributes are positioned inside the opening tag, before the right bracket. Attributes are paired with values (in this example, the value is info). Key / value pairs are an important concept in programming. Attributes are selected from a pre-defined set of possible attributes depending on the element. Values are assigned to attributes and they must be contained inside quotation marks. HTML elements 'nest' inside of one another. The element that opens first closes last. When nesting elements, spaces and tabs are often used to show the level of nesting. However, the spacing is not required and is only used to make HTML easier to read for humans. Here is an example of some HTML with a few levels of nesting elements:"
  },
  {
    "id": "02",
    "name": "Css",
    "img": "https://colorlib.com/wp/wp-content/uploads/sites/2/creative-css3-tutorials.jpg",
    "details": "CSS is used to control the style of a web document in a simple and easy way. CSS is the acronym for 'Cascading Style Sheet'. This tutorial covers both the versions CSS1,CSS2 and CSS3, and gives a complete understanding of CSS, starting from its basics to advanced concepts. Why to Learn CSS? Cascading Style Sheets, fondly referred to as CSS, is a simple design language intended to simplify the process of making web pages presentable. CSS is a MUST for students and working professionals to become a great Software Engineer specially when they are working in Web Development Domain. I will list down some of the key advantages of learning CSS: Create Stunning Web site - CSS handles the look and feel part of a web page. Using CSS, you can control the color of the text, the style of fonts, the spacing between paragraphs, how columns are sized and laid out, what background images or colors are used, layout designs,variations in display for different devices and screen sizes as well as a variety of other effects. Become a web designer - If you want to start a carrer as a professional web designer, HTML and CSS designing is a must skill. Control web - CSS is easy to learn and understand but it provides powerful control over the presentation of an HTML document. Most commonly, CSS is combined with the markup languages HTML or XHTML. Learn other languages - Once you understands the basic of HTML and CSS then other related technologies like javascript, php, or angular are become easier to understand. Applications of CSS As mentioned before, CSS is one of the most widely used style language over the web. I'm going to list few of them here: CSS saves time - You can write CSS once and then reuse same sheet in multiple HTML pages. You can define a style for each HTML element and apply it to as many Web pages as you want. Pages load faster - If you are using CSS, you do not need to write HTML tag attributes every time. Just write one CSS rule of a tag and apply it to all the occurrences of that tag. So less code means faster download times. Easy maintenance - To make a global change, simply change the style, and all elements in all the web pages will be updated automatically. Superior styles to HTML - CSS has a much wider array of attributes than HTML, so you can give a far better look to your HTML page in comparison to HTML attributes. Multiple Device Compatibility - Style sheets allow content to be optimized for more than one type of device. By using the same HTML document, different versions of a website can be presented for handheld devices such as PDAs and cell phones or for printing. Global web standards - Now HTML attributes are being deprecated and it is being recommended to use CSS. So its a good idea to start using CSS in all the HTML pages to make them compatible to future browsers.AD Audience This CSS tutorial will help both students as well as professionals who want to make their websites or personal blogs more attractive. Prerequisites You should be familiar with: Basic word processing using any text editor. How to create directories and files. How to navigate through different directories. Internet browsing using popular browsers like Internet Explorer or Firefox. Developing simple Web Pages using HTML or XHTML. If you are new to HTML and XHTML, then we would suggest you to go through our HTML Tutorial or XHTML Tutorial first."
  },
  {
    "id": "03",
    "name": "Javascript",
    "img": "https://cms.rootstack.com/sites/default/files/inline-images/javascript%20logo_0.png",
    "details": "Welcome to the JavaScriptTutorial.net website! This JavaScript Tutorial helps you learn the JavaScript programming language from scratch quickly and effectively. If you… Are not sure where to start learning JavaScript.  Are frustrated with copy-n-paste JavaScript code from others without really understanding it. Cannot add richer and more compelling features to your websites and web applications using JavaScript because you don’t know how to get much out of the language. JavaScriptTutorial.net is a good place to start.What is JavaScript JavaScript (js) is a light-weight object-oriented programming language which is used by several websites for scripting the webpages. It is an interpreted, full-fledged programming language that enables dynamic interactivity on websites when applied to an HTML document. It was introduced in the year 1995 for adding programs to the webpages in the Netscape Navigator browser. Since then, it has been adopted by all other graphical web browsers. With JavaScript, users can build modern web applications to interact directly without reloading the page every time. The traditional website uses js to provide several forms of interactivity and simplicity. Although, JavaScript has no connectivity with Java programming language. The name was suggested and provided in the times when Java was gaining popularity in the market. In addition to web browsers, databases such as CouchDB and MongoDB uses JavaScript as their scripting and query language.  There are following features of JavaScript: All popular web browsers support JavaScript as they provide built-in execution environments. JavaScript follows the syntax and structure of the C programming language. Thus, it is a structured programming language. JavaScript is a weakly typed language, where certain types are implicitly cast (depending on the operation). JavaScript is an object-oriented programming language that uses prototypes rather than using classes for inheritance. It is a light-weighted and interpreted language. It is a case-sensitive language. JavaScript is supportable in several operating systems including, Windows, macOS, etc. It provides good control to the users over the web browsers. "
  },
  {
    "id": "04",
    "name": "React Js",
    "img": "https://www.datocms-assets.com/14946/1638186862-reactjs.png?auto=format&w=1000",
    "details": "ReactJS tutorial provides basic and advanced concepts of ReactJS. Currently, ReactJS is one of the most popular JavaScript front-end libraries which has a strong foundation and a large community. ReactJS is a declarative, efficient, and flexible JavaScript library for building reusable UI components. It is an open-source, component-based front end library which is responsible only for the view layer of the application. It was initially developed and maintained by Facebook and later used in its products like WhatsApp & Instagram. Our ReactJS tutorial includes all the topics which help to learn ReactJS. These are ReactJS Introduction, ReactJS Features, ReactJS Installation, Pros and Cons of ReactJS, ReactJS JSX, ReactJS Components, ReactJS State, ReactJS Props, ReactJS Forms, ReactJS Events, ReactJS Animation and many more.The main objective of ReactJS is to develop User Interfaces (UI) that improves the speed of the apps. It uses virtual DOM (JavaScript object), which improves the performance of the app. The JavaScript virtual DOM is faster than the regular DOM. We can use ReactJS on the client and server-side as well as with other frameworks. It uses component and data patterns that improve readability and helps to maintain larger apps.React is an open source, JavaScript library for developing user interface (UI) in web application. React is developed and released by Facebook. Facebook is continuously working on the React library and enhancing it by fixing bugs and introducing new features. This tutorial starts with the architecture of React, how-to guide to setup projects, creating components, JSX and then walks through advanced concepts like state management, form programming, routing and finally conclude with step by step working example.ReactJS is a simple, feature rich, component based JavaScript UI library. It can be used to develop small applications as well as big, complex applications. ReactJS provides minimal and solid feature set to kick-start a web application. React community compliments React library by providing large set of ready-made components to develop web application in a record time. React community also provides advanced concept like state management, routing, etc., on top of the React library."
  },
  {
    "id": "05",
    "name": "Node Js",
    "img": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/d9/Node.js_logo.svg/1200px-Node.js_logo.svg.png",
    "details": "Node.js is an open-source, cross-platform, back-end JavaScript runtime environment that runs on a JavaScript Engine (i.e. V8 engine) and executes JavaScript code outside a web browser, which was designed to build scalable network applications. Node.js lets developers use JavaScript to write command line tools and for server-side scripting—running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a 'JavaScript everywhere' paradigm,[6] unifying web-application development around a single rogramming language, rather than different languages for server-side and client-side scripts.  Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web lications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[7] The Node.js distributed development project was previously governed by the Node.js Foundation,[8] and has now merged with the JS Foundation to form the OpenJS Foundation, which is facilitated by the Linux Foundation's Collaborative Projects program.[9]Node.js was written initially by Ryan Dahl in 2009,[24] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[25] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[26] Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27] Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31] In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js packages and is designed to simplify installation, updating, and uninstallation of packages.[31] In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011. In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35] In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39] In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40] In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This merge brought V8 ES6 features into Node.js and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merge.[43] In 2019, the JS Foundation and Node.js Foundation merged to form the OpenJS Foundation.In September 2022, Node.js 18.9.0 was released.[44]"
  },
  {
    "id": "06",
    "name": "Express",
    "img": "https://initialcommit.com/img/initialcommit/beginners-guide-to-using-express-js-and-node-js-framework.png",
    "details": "Express.js, or simply Express, is a back end web application framework for building RESTful APIs with Node.js, released as free and open-source software under the MIT License. It is designed for building web applications and APIs.[3] It has been called the de facto standard server framework for Node.js.[4]. The original author, TJ Holowaychuk, described it as a Sinatra-inspired server,[5] meaning that it is relatively minimal with many features available as plugins. Express is the back-end component of popular development stacks like the MEAN, MERN or MEVN stack, together with the MongoDB database software and a JavaScript front-end framework or library.[6] Express.js was founded by TJ Holowaychuk. The first release, according to Express.js's GitHub repository, was on 22 May 2010. Version 0.12 In June 2014, rights to manage the project were acquired by StrongLoop.[7] StrongLoop was acquired by IBM in September 2015;[8] in January 2016, IBM announced that it would place Express.js under the stewardship of the Node.js Foundation incubator.[9] Node (or more formally Node.js) is an open-source, cross-platform runtime environment that allows developers to create all kinds of server-side tools and applications in JavaScript. The runtime is intended for use outside of a browser context (i.e. running directly on a computer or server OS). As such, the environment omits browser-specific JavaScript APIs and adds support for more traditional OS APIs including HTTP and file system libraries. From a web server development perspective Node has a number of benefits:  Great performance! Node was designed to optimize throughput and scalability in web applications and is a good solution for many common web-development problems (e.g. real-time web pplications).  Code is written in 'plain old JavaScript', which means that less time is spent dealing with 'context shift' between languages when you're writing both client-side and server-side code.  JavaScript is a relatively new programming language and benefits from improvements in language design when compared to other traditional web-server languages (e.g. Python, PHP, etc.) Many other new and popular languages compile/convert into JavaScript so you can also use TypeScript, CoffeeScript, ClojureScript, Scala, LiveScript, etc. The node package manager (npm) provides access to hundreds of thousands of reusable packages. It also has best-in-class dependency resolution and can also be used to automate most of the build toolchain.  Node.js is portable. It is available on Microsoft Windows, macOS, Linux, Solaris, FreeBSD, OpenBSD, WebOS, and NonStop OS. Furthermore, it is well-supported by many web hosting providers, that often provide specific infrastructure and documentation for hosting Node sites. It has a very active third party ecosystem and developer community, with lots of people who are willing to help. You can use Node.js to create a simple web server using the Node HTTP package."
  }
]
